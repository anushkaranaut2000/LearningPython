import pygame
import random

# Define some colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)
RED = (255, 0, 0)

# Set the dimensions of the screen
WIDTH = 800
HEIGHT = 600

# Initialize Pygame
pygame.init()

# Create the screen
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Escape the Maze")

# Set up the game clock
clock = pygame.time.Clock()

# Define the player
player_size = 20
player_pos = [WIDTH/2, HEIGHT/2]

# Define the enemy
enemy_size = 20
enemy_pos = [random.randint(0, WIDTH-enemy_size), random.randint(0, HEIGHT-enemy_size)]

# Define the obstacles
obstacle_size = 50
obstacle_pos = [random.randint(0, WIDTH-obstacle_size), random.randint(0, HEIGHT-obstacle_size)]

# Set up the game loop
game_over = False

while not game_over:
    # Handle events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            game_over = True

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                player_pos[0] -= player_size
            elif event.key == pygame.K_RIGHT:
                player_pos[0] += player_size
            elif event.key == pygame.K_UP:
                player_pos[1] -= player_size
            elif event.key == pygame.K_DOWN:
                player_pos[1] += player_size

    # Clear the screen
    screen.fill(WHITE)

    # Draw the player
    pygame.draw.rect(screen, RED, (player_pos[0], player_pos[1], player_size, player_size))

    # Draw the enemy
    pygame.draw.rect(screen, BLACK, (enemy_pos[0], enemy_pos[1], enemy_size, enemy_size))

    # Draw the obstacle
    pygame.draw.rect(screen, GREEN, (obstacle_pos[0], obstacle_pos[1], obstacle_size, obstacle_size))

    # Check for collisions
    if player_pos[0] + player_size > enemy_pos[0] and player_pos[0] < enemy_pos[0] + enemy_size and player_pos[1] + player_size > enemy_pos[1] and player_pos[1] < enemy_pos[1] + enemy_size:
        game_over = True
    elif player_pos[0] + player_size > obstacle_pos[0] and player_pos[0] < obstacle_pos[0] + obstacle_size and player_pos[1] + player_size > obstacle_pos[1] and player_pos[1] < obstacle_pos[1] + obstacle_size:
        game_over = True

    # Update the screen
    pygame.display.update()

    # Set the game clock
    clock.tick(60)

# Quit Pygame
pygame.quit()
